#include <stdio.h>
#define P 5
#define R 3
int main(){
int Max[P][R]={
    {7,5,3},
    {3,2,2},
    {9,0,2},
    {2,2,2},
    {4,3,3}
};
int allot[P][R]={
    {0,1,0},
    {2,0,0},
    {3,0,2},
    {2,1,2},
    {0,0,2}
};
int avail[R]={3,3,2};
int Need[P][R];
for(int i=0;i<P;i++){
    for(int j=0;j<R;j++){
        Need[i][j]=Max[i][j]-allot[i][j];
    } 
    }
    int work[R];
    for(int i=0;i<R;i++){
        work[i]=avail[i];
    }
    int finish[P]={0};
    int safeseq[P];
    int count=0;
    
    while(count<P){
        int found=0;
        for(int i=0;i<P;i++){
            if(!finish[i]){
                int j;
                for(j=0;j<R;j++){
                    if(Need[i][j]>work[j]){
                        break;
                    }
                }
                if(j==R){
                    for(int k=0;k<R;k++){
                        work[k]+=allot[i][k];
                    }
                    safeseq[count++]=i;
                    finish[i]=1;
                    found =1;
                }
            }
        }
        if (!found) {
            printf("System is in an unsafe state! No safe sequence exists.\n");
            return 0;
        }
    }
    printf("System is in a safe state.\nSafe sequence: ");
    for (int i = 0; i < P; i++) {
        printf("P%d ", safeseq[i]);
    }
    return 0;
}
//find safe sequence

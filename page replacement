#include <stdio.h>
#define MAX 100
int pagehit(int frames[],int f,int page){
    for(int i=0;i<f;i++){
        if(frames[i]==page){
            return 1;//page hit
        }
       
    }
     return 0;//page fault
}
void printframes(int frames[],int f){
    printf("Frame: ");
    for(int i=0;i<f;i++){
        if(frames[i]!=-1){
            printf("%d ",frames[i]);
        }
        else{
            printf("- ");
        }
    }
    printf("\n");
}
void FIFO(int pages[],int n,int f){
    int frames[f];
    int front=0,pgfaults=0;
    for(int i=0;i<f;i++){
        frames[i]=-1;
    }
    for(int i=0;i<n;i++){
        if(!pagehit(frames,f,pages[i])){
            frames[front]=pages[i];
            front=(front+1)%f;
            pgfaults++;
            printframes(frames,f);
        }
        else{
            printf("Page %d ->Hit\n",pages[i]);
        }
    }
    printf("Total Page Faults=%d\n",pgfaults);
    
}
int main(){
    int n,f;
    int pages[MAX];
    printf("enter page refernce no");
    scanf("%d",&n);
    printf("enter pages:\n");
    for(int i=0;i<n;i++){
        scanf("%d",&pages[i]);
    }
    printf("Enter frame size");
    scanf("%d",&f);
    FIFO(pages,n,f);
    return 0;
}
//lru
#include <stdio.h>
#include <limits.h>
#define MAX 100

int findLRU(int time[], int f){
    int min = INT_MAX, pos = -1;
    for(int i = 0; i < f; i++){
        if(time[i] < min){
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

void printframes(int frames[], int f){
    printf("Frame: ");
    for(int i = 0; i < f; i++){
        if(frames[i] != -1){
            printf("%d ", frames[i]);
        }
        else{
            printf("- ");
        }
    }
    printf("\n");
}

void LRU(int pages[], int n, int f){
    int frames[f], time[f], count = 0, pgfaults = 0;

    for(int i = 0; i < f; i++){
        frames[i] = -1;
    }

    for(int i = 0; i < n; i++){
        int flag = 0;

        // Check if page is already in frame (Hit)
        for(int j = 0; j < f; j++){
            if(frames[j] == pages[i]){
                count++;
                time[j] = count;
                flag = 1;
                printf("Page %d -> Hit\n", pages[i]);  // ✅ Fixed incorrect print format
                break;
            }
        }

        // If page is not found (Page Fault)
        if(!flag){
            int pos = -1;

            // Find empty frame
            for(int j = 0; j < f; j++){
                if(frames[j] == -1){
                    pos = j;
                    break;
                }
            }

            // If no empty frame, replace least recently used page
            if(pos == -1){
                pos = findLRU(time, f);
            }

            frames[pos] = pages[i];
            count++;
            time[pos] = count;
            pgfaults++;

            // ✅ Ensure proper frame print formatting
            printf("Page %d -> ", pages[i]);
            printframes(frames, f);
        }
    }

    printf("Total Page Faults (LRU): %d\n", pgfaults);
}

int main(){
    int n, f;
    int pages[MAX];

    printf("Enter number of page references: ");
    scanf("%d", &n);

    printf("Enter reference string: ");
    for(int i = 0; i < n; i++){
        scanf("%d", &pages[i]);
    }

    printf("Enter frame size: ");
    scanf("%d", &f);

    LRU(pages, n, f);
    return 0;
}

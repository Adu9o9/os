#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>
#define BUFFER_SIZE 5
#define MAX_ITEMS 5
int buff[BUFFER_SIZE];
int in=0,out=0;
sem_t mutex,empty,full;
void* producer(void* arg){
    int item;
    for(int i=0;i<MAX_ITEMS;i++){
        item=rand()%10;
        sem_wait(&empty);//waits if empty
        sem_wait(&mutex);//acquire lock
        buff[in]=item;
        printf("Produced:%d\n",item);
        in=(in+1)%BUFFER_SIZE;
        sem_post(&mutex);
        sem_post(&full);//inidcate consumer
        sleep(1);
    }
    pthread_exit(NULL);
}
void* consumer(void* arg){
    int item;
    for(int i=0;i<MAX_ITEMS;i++){
        sem_wait(&full);//waits if empty
        sem_wait(&mutex);
        item=buff[out];
        out=(out+1)%BUFFER_SIZE;
        printf("Consumed:%d\n",item);
        sem_post(&mutex);
        sem_post(&empty);//remove item
        sleep(2);
    }
    pthread_exit(NULL);
}
int main(){
    pthread_t producer_thrd[2],consumer_thrd[2];
    sem_init(&mutex,0,1);
    sem_init(&empty,0,5);
    sem_init(&full,0,0);
    
    for(int i=0;i<2;i++){
        pthread_create(&producer_thrd[i],NULL,producer,NULL);
    }
    for(int i=0;i<2;i++){
        pthread_create(&consumer_thrd[i],NULL,consumer,NULL);
    }
    for(int i=0;i<2;i++){
        pthread_join(producer_thrd[i],NULL);
    }
     for(int i=0;i<2;i++){
        pthread_join(consumer_thrd[i],NULL);
    }
    
    sem_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);
    
    return 0;
}

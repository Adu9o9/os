
https://justpaste.it/gft4p

#include <stdio.h>
typedef struct Process{
    int name;
    int at;
    int bt;
    int ct;
    int tat;
    int wt;
}P;
void swap(P *a, P *b){
    P temp=*a;
    *a=*b;
    *b=temp;
}
void sortbyA(P process[],int n){
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(process[j].at>process[j+1].at){
                swap(&process[j],&process[j+1]);
            }
        }
    }
}
int main(){
    int n;
    printf("enter no.of process");
    scanf("%d",&n);
    printf("enter at,bt");
    P process[n];
    for(int i=0;i<n;i++){
        scanf("%d%d%d",&process[i].name,&process[i].at,&process[i].bt);
    }
    sortbyA(process,n);
    int time=0;
    float avgtat=0.0,avgwt=0.0;
    printf("Gantt chart:");
    for(int i=0;i<n;i++){
        if(time<process[i].at){
            printf("\tIDLE\t");
            time=process[i].at;
        }
        printf("P%d\t",process[i].name);
        time+=process[i].bt;
        process[i].ct=time;
        process[i].tat=process[i].ct-process[i].at;
        process[i].wt=process[i].tat-process[i].bt;
        avgtat+=process[i].tat;
        avgwt+=process[i].wt;
        
    }
    printf("\n");
    printf("Process\tAT\tBT\tCT\tTAT\tWT\n");
    for(int i=0;i<n;i++){
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t\n",process[i].name,process[i].at,process[i].bt,process[i].ct,process[i].tat,process[i].wt);
        
    }
    printf("Averagae turnaround time=%.2f",avgtat/n);
    printf("Average waiting time=%.2f",avgwt/n);
    
    return 0;
}

//sjf

#include <stdio.h>
typedef struct{
    int name;
    int arrival;
    int burst;
    int waiting;
    int completion;
    int turnaround;
    int executed;
}Process;
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort processes by arrival time
void sortByArrival(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival > processes[j + 1].arrival) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}
int findShortestJob(Process processes[], int n, int current_time) {
    int min_burst = __INT_MAX__;
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (!processes[i].executed && processes[i].arrival <= current_time) {
            if (processes[i].burst < min_burst) {
                min_burst = processes[i].burst;
                index = i;
            }
        }
    }
    return index; // Returns index of the shortest available process
}

int main(){
    Process processes[]={
        {1,2,1},
        {2,1,5},
        {3,4,1},
        {4,0,6},
        {5,2,3},
    };
int n= sizeof(processes)/sizeof(Process);
sortByArrival(processes, n);
int current_time=0;
int completed = 0;
printf("Completion Time | Process\n");
while (completed < n) {
        int index = findShortestJob(processes, n, current_time);

        // If no process is available, CPU is idle
        if (index == -1) {
            printf("%-5d | IDLE\n", current_time + 1);
            current_time++;
            continue;
        }
    int execution_time=processes[index].burst;    
    current_time+=execution_time;
    printf("%-5d | P%d \n",current_time,processes[index].name);
    processes[index].completion=current_time;
    processes[index].turnaround=processes[index].completion-processes[index].arrival;
    processes[index].waiting=processes[index].turnaround-processes[index].burst;
    processes[index].executed = 1;
        completed++;
        
        
}
float avgwt=0.0;
float avgtat=0.0;
printf("Process%10s%10s%15s%20s\n", "ArrivalTime", "BurstTime", "TurnaroundTime", "WaitingTime");
for(int i=0;i<n;i++){
    printf("P%d%10d%10d%15d%20d\n", processes[i].name, processes[i].arrival, processes[i].burst, processes[i].turnaround, processes[i].waiting);
    avgwt+=processes[i].waiting;
    avgtat+=processes[i].turnaround;
}
printf("Average Turnaround Time:%f\n",avgtat/n);
printf("Average Waiting Time:%f\n",avgwt/n);

return 0;
}

//prioriy

#include <stdio.h>

typedef struct {
    int name;
    int priority;
    int burst;
    int arrival;
    int waiting;
    int completion;
    int turnaround;
    int executed; // Flag to track execution
} Process;

// Swap function for sorting
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort by arrival time and priority (Lower priority value = Higher priority)
void sortByArrivalAndPriority(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival > processes[j + 1].arrival || 
               (processes[j].arrival == processes[j + 1].arrival && processes[j].priority > processes[j + 1].priority)) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Priority Scheduling Function (Non-preemptive)
void priorityScheduling(Process processes[], int n) {
    int current_time = 0;
    float avgWT = 0.0, avgTAT = 0.0;

    // Sort processes based on Arrival and Priority
    sortByArrivalAndPriority(processes, n);

    printf("Completion Time | Process\n");

    for (int i = 0; i < n; i++) {
        // If current time is less than process arrival, CPU is idle
        if (current_time < processes[i].arrival) {
            printf("%-5d | IDLE\n", processes[i].arrival);
            current_time = processes[i].arrival; // Move to the process arrival time
        }

        // Execute the process
        current_time += processes[i].burst;
        processes[i].completion = current_time;
        processes[i].turnaround = processes[i].completion - processes[i].arrival;
        processes[i].waiting = processes[i].turnaround - processes[i].burst;

        printf("%-5d | P%d \n", current_time, processes[i].name);
    }

    // Print final results
    printf("\nProcess%10s%10s%10s%15s%20s\n", "Priority", "Arrival", "Burst", "Turnaround", "Waiting");
    for (int i = 0; i < n; i++) {
        printf("P%d%10d%10d%10d%15d%20d\n", processes[i].name, processes[i].priority, processes[i].arrival, processes[i].burst, processes[i].turnaround, processes[i].waiting);
        avgWT += processes[i].waiting;
        avgTAT += processes[i].turnaround;
    }

    printf("Average Turnaround Time: %.2f\n", avgTAT / n);
    printf("Average Waiting Time: %.2f\n", avgWT / n);
}

// Main function
int main() {
    Process processes[] = {
        {1, 1, 4, 0},
        {2, 2, 3, 0},
        {3, 1, 7, 6},
        {4, 2, 2, 11},
        {5, 3, 4, 12},
    };

    int n = sizeof(processes) / sizeof(Process);
    priorityScheduling(processes, n);
    return 0;
}

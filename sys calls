#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
int main(){
    pid_t pid=fork();
    if(pid<0){
        perror("fork failed");
    }
    else if(pid==0){
        printf("child process executing the -ls command\n");
        printf("Child process:%d\n",getpid());
        printf("Parent:%d\n",getppid());
        
        execlp("/bin/date","date",NULL);
        
        perror("execlp fails");
        exit(1);
    }
    else{
        wait(NULL);
        printf("Parents process executing\n");
        printf("Parent process:%d\n",getpid());
        printf("Child:%d\n",pid);
    }
}
//file
#include <stdio.h>
#include <sys/stat.h>
#include <time.h>
#include <stdlib.h>
#include <dirent.h>

int main(){
    struct stat filestat;
    if(stat("example.txt",&filestat)==-1){
        perror("Error getting file status");
        exit(1);
    }
    printf("File size:%ld bytes\n", filestat.st_size);
    printf("Inode num:%ld\n", filestat.st_ino);
    printf("LAST MODIEIFED:%s", ctime(&filestat.st_mtime));
    printf("No of links:%ld\n", filestat.st_nlink);

    DIR *dir = opendir(".");
    if(dir == NULL){
        perror("Error opening directory");
        exit(1);
    }
    struct dirent *entry;
    printf("Files in current directory:\n");
    while((entry=readdir(dir))!=NULL){
        printf("%s\n", entry->d_name);
    }
    closedir(dir);
    printf("Directory closed successfully\n");
    return 0;
}
